Deklination Maskulinum Singular(Baum, Baums, Baum, Baum) Plural(Bäume)
Deklination Maskulinum Singular(Knoten, Knotens, Knoten, Knoten) Plural(Knoten)
Deklination Neutrum Singular (Blatt, Blatts, Blatt, Blatt) Plural(Blätter)
Deklination Maskulinum Singular (Wert, Werts, Wert, Wert) Plural(Werte)
Deklination Maskulinum Singular(Ast, Asts, Ast, Ast) Plural(Äste, Äste, Ästen, Äste)


Adjektiv<Wert> konsumierend:
  Verb konsumiere den Wert
.

// Das ist die Top Datenstruktur welche den Wurzelknoten verwaltet
Nomen<vergleichbarer<Wert> Wert> BinärBaum:
  // Der Baum ist am Anfang nur ein Blate
  jener WurzelKnoten ist ein Blatt<Wert> als Knoten<Wert>
.

Implementiere<vergleichbarer<Wert> Wert> den BinärBaum<Wert>:
  
  Verb füge den Wert hinzu:
    wenn mein WurzelKnoten ein Blatt<Wert> ist:
      mein WurzelKnoten ist ein Ast<Wert> mit dem Wert
    .
    sonst:
      mein WurzelKnoten: füge den Wert hinzu!
    .
  .

  Verb durchlaufe mich mit dem Konsumierenden<Wert>:
      durchlaufe meinen WurzelKnoten mit dem Konsumierenden
  .
.

// Das ist die Elternklasse der zwei Knotenarten: Ast und Blatt
Nomen<Wert> Knoten:.

Implementiere<vergleichbarer<Wert> Wert> den Knoten<Wert>:

  Verb füge den Wert hinzu:
    // überschreibe diese Methode in der Kindklasse "Ast"
  .

  Verb(Boolean) enthält den Wert:
    // überschreibe diese Methode in der Kindklasse "Ast"
    gebe falsch zurück
  .

  Verb durchlaufe mich mit dem Konsumierenden<Wert>:
    // überschreibe diese Methode in der Kindklasse "Ast"
  .
.

// Ein Ast hat einen Wert, einen linken Knoten und einen rechten Knoten
Nomen<Wert> Ast mit dem Wert
  als Knoten<Wert>:
    jener linkeKnoten ist ein Blatt<Wert> als Knoten<Wert>
    jener rechteKnoten ist ein Blatt<Wert> als Knoten<Wert>
  .

Implementiere<vergleichbarer<Wert> Wert> den Ast<Wert>:
  Verb füge den Wert hinzu:
    wenn der Wert kleiner als mein Wert ist:
      wenn mein linkerKnoten ein Blatt<Wert> ist:
        mein linkerKnoten ist ein Ast<Wert> mit dem Wert
      . sonst:
        mein linkerKnoten: füge den Wert hinzu!
      .
    . sonst:
      wenn mein rechterKnoten ein Blatt<Wert> ist:
        mein rechterKnoten ist ein Ast<Wert> mit dem Wert
      . sonst:
        mein rechterKnoten: füge den Wert hinzu!
      .
    .
  .

  Verb durchlaufe mich mit dem Konsumierenden<Wert>:
    durchlaufe meinen linkenKnoten mit dem Konsumierenden
    Konsumierendes: konsumiere meinen Wert!
    durchlaufe meinen rechtenKnoten mit dem Konsumierenden
  .
.

// Ein Blatt ist einfach ein leerer Knoten
Nomen<Wert> Blatt als Knoten<Wert>:.

// teste hier den geschriebenen Binärbaum
schreibe die Zeile "Ein Binärbaum mit Zahlen:"
ein BinärBaum<Zahl>:
  füge die Zahl 5 hinzu
  füge die Zahl 2 hinzu
  füge die Zahl 1 hinzu
  füge die Zahl 4 hinzu
  füge die Zahl 3 hinzu

  // gibt die Zahlen der Reihenfolge nach aus
  durchlaufe dich mit etwas Konsumierendem: schreibe die Zahl.
!

schreibe die Zeile ""


schreibe die Zeile "Ein Binärbaum mit Zeichenfolgen:"
ein BinärBaum<Zeichenfolge>:
  füge die Zeichenfolge "Hallo Welt" hinzu
  füge die Zeichenfolge "Test" hinzu
  füge die Zeichenfolge "Ananas" hinzu
  füge die Zeichenfolge "Flugzeug" hinzu
  füge die Zeichenfolge "Banane" hinzu

  // gibt die eigegebenen Zeichenfolgen alphabetisch aus
  durchlaufe dich mit etwas Konsumierendem: schreibe die Zeile Zeichenfolge.
!