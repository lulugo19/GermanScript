Deklination Femininum Singular(Liste) Plural(Listen)
Deklination Neutrum Singular(Element) Plural(Elemente)
Deklination Maskulinum Singular(Index) Plural(Indizes)
Deklination Maskulinum Singular(Iterator, Iterators, Iterator, Iterator) Plural(Iteratoren)
Deklination Maskulinum Singular(Akkumulator, Akkumulators, Akkumulator, Akkumulator) Plural(Akkumulatoren)
Deklination Maskulinum Singular(Wert, Werts, Wert, Wert) Plural(Werte)
Deklination Femininum Singular(Summe) Plural(Summen)

// der Listentyp ist in Germanskript ein so elementarer Typ (Plural, spezielle Syntax nur für Liste),
// dass er außerhalb des Moduls definiert wird
Nomen<Element> Liste:
    jene AnZahl ist 0
.

Adjektiv<Typ> vergleichend:
    Verb(Zahl) vergleiche den TypA mit dem TypB
.

Adjektiv<Typ> bedingt:
    Verb(Boolean) überprüfe den Typ
.

Adjektiv<Typ, ErgebnisTyp> transformierend:
    Verb(ErgebnisTyp) transformiere den Typ
.

Adjektiv<Typ, ErgebnisTyp> reduzierend:
    Verb(ErgebnisTyp) reduziere den ErgebnisTyp Akkumulator mit dem Typ
.

Adjektiv<Typ> iterierbar:
    Verb hole (das Iterierende<Typ> Iterator)
.

Adjektiv<Typ> iterierend:
    Verb(Boolean) läuft weiter
    Verb hole (den Typ)
.

Modul Standard::Collections:
    Implementiere<Element> die iterierbare<Element> Liste<Element>:

        Verb(Boolean) enthalten das Element: intern.
        Verb füge das Element hinzu: intern.
        Verb entferne an der Zahl Index: intern.

        Verb hole (den iterierenden<Element> Iterator):
            ein Index ist 0
            die AnZahl ist meine AnZahl
            die Elemente sind Ich

            gebe etwas Iterierendes:
                Verb(Boolean) läuft weiter:
                    gebe den Index kleiner als die AnZahl zurück
                .

                Verb hole (das Element):
                    ein Index ist der Index + 1
                    gebe das Element[Index - 1] zurück
                .

            . zurück
        .

        Verb(Elemente) sortiere uns mit dem Vergleichenden<Element>:
            die ElementeKOPIE sind kopiere die Elemente Ich
            merge_sortiere die ElementeKOPIE mit dem Vergleichenden
            gebe die ElementeKOPIE zurück
        .

        Verb(Elemente) filter uns mit dem Bedingten<Element>:
            die Elemente sind Ich
            die gefiltertenElemente sind einige Elemente[]
            für jedes Element:
                wenn (Bedingtes: überprüfe den Typ Element!):
                    gefilterteElemente: füge das Element hinzu!
                .
            .
            gebe die gefiltertenElemente zurück
        .

        Verb<Typ>(Typen) transformiere uns mit dem Transformierenden<Element, Typ>:
            die Elemente sind Ich
            die transformiertenElemente sind einige Typen[]
            für jedes Element:
                das transformierteElement ist Transformierendes: transformiere den Typ Element!
                transformierteElemente: füge das transformierteElement hinzu!
            .
            gebe die transformiertenElemente zurück
        .

        Verb<Typ>(Typ) reduziere uns mit dem Typ AnfangsWert, dem Reduzierenden<Element, Typ>:
            die Elemente sind Ich
            ein Akkumulator ist der AnfangsWert
            für jedes Element:
                ein Akkumulator ist Reduzierendes: reduziere den Akkumulator mit dem Typ Element!
            .
            gebe den Akkumulator zurück
        .
    .

    Implementiere<vergleichbares<Element> Element> die Liste<Element>:
        Verb(Elemente) sortiere uns:
            gebe sortiere uns mit etwas Vergleichendem:
                vergleiche das ElementA mit dem Typ ElementB.
            zurück
        .

        Verb (Elemente) sortiere uns absteigend:
            gebe sortiere uns mit etwas Vergleichendem:
                vergleiche das ElementB mit dem Typ ElementA.
            zurück
        .
    .

    // Überlade den Plus-Operator für die Liste
    Implementiere<Element> die addierbare<Liste<Element>, Liste<Element>> Liste<Element>:

        Verb(Liste<Element>) addiere mich mit der Liste<Element>: intern.
    .

    Implementiere die Liste<Zahl>:
        Verb(Zahl) summiere uns:
            eine Summe ist 0
            die Zahlen sind Ich
            für jede Zahl:
                eine Summe ist die Summe plus die Zahl
            .
            gebe die Summe zurück
        .

        Eigenschaft(Zahl) Summe:
            gebe summiere uns zurück
        .
    .

    Verb<Element> merge_sortiere die ElementeA mit dem Vergleichenden<Element>:
        die ElementeB sind kopiere die ElementeA
        split_merge die ElementeB
            von der Zahl 0 zur AnZahl der ElementeA
            in die ElementeA mit dem Vergleichenden
    .

    Verb<Element> split_merge die ElementeB
        von der ZahlB zur ZahlE in die ElementeA
        mit dem Vergleichenden<Element>:
            wenn die ZahlE - die ZahlB <= 1 ist: zurück.
            die ZahlM ist Mathe::runde die Zahl ((die ZahlB + die ZahlE) / 2) ab

            split_merge die ElementeA von der ZahlB zur ZahlM
                in die ElementeB mit dem Vergleichenden

            split_merge die ElementeA von der ZahlM zur ZahlE
                in die ElementeB mit dem Vergleichenden

            merge die ElementeB von der ZahlB mit der ZahlM zur ZahlE
                in die ElementeA mit dem Vergleichenden
    .

    Verb<Element> merge die ElementeA
        von der ZahlB mit der ZahlM zur ZahlE
        in die ElementeB
        mit dem Vergleichenden<Element>:
            ein I ist die ZahlB
            ein J ist die ZahlM
            für jedes K von der ZahlB bis zur ZahlE:
                wenn das I < die ZahlM und
                  (das J >= der ZahlE oder (Vergleichendes: vergleiche den Typ ElementA[I] mit dem Typ ElementA[J]!) <= 0):
                    das ElementB[K] ist das ElementA[I]
                    ein I ist das I + 1
                .
                sonst:
                    das ElementB[K] ist das ElementA[J]
                    ein J ist das J + 1
                .
            .
    .

    Verb<Element>(Elemente) kopiere die Elemente:
        die ElementeKOPIE sind einige Elemente[]
        für jedes Element:
            ElementeKOPIE: füge das Element hinzu!
        .
        gebe die ElementeKOPIE zurück
    .
.
