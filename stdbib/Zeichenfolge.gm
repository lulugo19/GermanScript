Deklination Femininum Singular(Länge) Plural(Längen)
Deklination Femininum Singular(Zeichenfolge) Plural(Zeichenfolgen)
Deklination Maskulinum Singular(Separator, Separators, Separator, Separator) Plural(Separatoren)
Deklination Neutrum Singular(Zeichen, Zeichens, Zeichen, Zeichen) Plural(Zeichen)
Deklination Maskulinum Singular(Code, Codes, Code, Code) Plural(Codes)
Deklination Neutrum Singular(Ergebnis, Ergebnisses, Ergebnis, Ergebnis) Plural(Ergebnisse, Ergebnisse, Ergebnissen, Ergebnisse)

Nomen Zeichenfolge:
    jene Länge ist 0
.

Modul Zeichenfolge:
    Verb(Zeichenfolge) erstelle aus der Zahl Code: intern.
.

Implementiere die vergleichbare<Zeichenfolge>, iterierbare<Zeichenfolge> Zeichenfolge:
    Verb(Zahl) vergleiche mich mit der Zeichenfolge: intern.
    Verb(Zahl) code an der Zahl Index: intern.
    Verb(Zeichenfolgen) trenne mich zwischen der Zeichenfolge Separator: intern.

    Als Boolean:
        wenn meine Länge gleich 0 ist: gebe wahr zurück.
        sonst: gebe falsch zurück.
    .

    Als Zahl: intern.

    Verb hole (den iterierenden<Zeichenfolge> Iterator):
        die Zeichenfolge ist Ich
        die Länge ist meine Länge
        ein Index ist 0
        gebe etwas Iterierendes:
            Verb(Boolean) läuft weiter:
                gebe den Index kleiner als die Länge zurück
            .

            Verb hole (die Zeichenfolge):
                ein Index ist der Index + 1
                gebe die Zeichenfolge[der Index - 1] zurück
            .
        . zurück
    .

    Verb(Zahl) index von der ZeichenfolgeX:
        die Zeichenfolge ist Ich
        gebe (Zeichenfolge: index von der ZeichenfolgeX ab dem Index 0!) zurück
    .

    Verb(Zahl) index von der ZeichenfolgeX ab der Zahl IndexSTART:
        die Zeichenfolge ist Ich
        das M ist meine Länge
        das N ist die Länge der ZeichenfolgeX

        wenn das N > das M ist: gebe -1 zurück.
        wenn das N gleich 0 ist: gebe -1 zurück.

        das ersteZeichen ist die ZeichenfolgeX[0]

        ein I ist der IndexSTART
        solange das I kleiner als das M ist:
            // finde das erste Zeichen
            solange das I kleiner als das M ist und die Zeichenfolge[I] ungleich dem erstenZeichen ist:
                ein I ist das I plus 1
            .
            // nur wenn die gesuchte Zeichenfolge noch reinpasst
            wenn das N <= dem M - das I ist:
                // überprüfe den Rest
                ein J ist das I plus 1
                ein K ist 1
                solange das K kleiner als das N ist und die Zeichenfolge[J] = der ZeichenfolgeX[K] ist:
                    ein J ist das J plus 1
                    ein K ist das K plus 1
                .
                wenn das K gleich dem N ist:
                    gebe das I zurück
                .
                ein I ist das I plus 1
            .
            sonst: gebe -1 zurück.
        .
        gebe -1 zurück
    .

    Verb(Zahl) letzter_index von der ZeichenfolgeX:
        die Zeichenfolge ist Ich
        gebe (Zeichenfolge: letzter_index von der ZeichenfolgeX ab dem Index 0!) zurück
    .

    Verb(Zahl) letzter_index von der ZeichenfolgeX ab der Zahl IndexSTART:
        die Zeichenfolge ist Ich
        das M ist meine Länge
        das N ist die Länge der ZeichenfolgeX

        wenn das N > das M ist: gebe -1 zurück.
        wenn das N gleich 0 ist: gebe -1 zurück.

        das ersteZeichen ist die ZeichenfolgeX[0]

        ein I ist der IndexSTART
        ein Index ist -1
        solange das I kleiner als das M ist:
            // finde das erste Zeichen
            solange das I kleiner als das M ist und die Zeichenfolge[I] ungleich dem erstenZeichen ist:
                ein I ist das I plus 1
            .
            // nur wenn die gesuchte Zeichenfolge noch reinpasst
            wenn das N <= dem M - das I ist:
                // überprüfe den Rest
                ein J ist das I plus 1
                ein K ist 1
                solange das K kleiner  als das N ist und die Zeichenfolge[J] = der ZeichenfolgeX[K] ist:
                    ein J ist das J plus 1
                    ein K ist das K plus 1
                .
                wenn das K gleich dem N ist:
                    ein Index ist das I
                .
                ein I ist das I plus 1
            .
            sonst: gebe den Index zurück.
        .
        gebe den Index zurück
    .

    Verb(Boolean) enthält die ZeichenfolgeX:
        die Zeichenfolge ist Ich
        wenn (Zeichenfolge: index von der ZeichenfolgeX!) gleich -1 ist: gebe falsch zurück.
        sonst: gebe wahr zurück.
    .


    Verb(Zeichenfolge) teile mich ab der Zahl IndexSTART zu der Zahl IndexENDE:
        die Zeichenfolge ist Ich
        ein Ergebnis ist ""
        ein Index ist der IndexSTART
        solange der Index kleiner als der IndexENDE ist:
            ein Ergebnis ist das Ergebnis + die Zeichenfolge[Index]
            ein Index ist der Index + 1
        .
        gebe das Ergebnis zurück
    .

    Verb(Zeichenfolge) buchstabiere mich groß:
        die Zeichenfolge ist Ich
        ein Ergebnis ist ""
        ein Index ist 0
        solange der Index < meine Länge ist:
            das Zeichen ist die Zeichenfolge[Index]
            der Code ist Zeichenfolge: code an dem Index!
            wenn der Code >= 97 und der Code <= 122 ist:
                ein Ergebnis ist das Ergebnis + Zeichenfolge::erstelle aus dem Code - 32
            .
            sonst wenn der Code = 228 ist:
                ein Ergebnis ist das Ergebnis + "Ä"
            .
            sonst wenn der Code = 214 ist:
                ein Ergebnis ist das Ergebnis + "Ö"
            .
            sonst wenn der Code = 252 ist:
                ein Ergebnis ist das Ergebnis + "Ü"
            .
            sonst:
                ein Ergebnis ist das Ergebnis + das Zeichen
            .
            ein Index ist der Index + 1
        .
        gebe das Ergebnis zurück
    .

    Verb(Zeichenfolge) buchstabiere mich klein:
        die Zeichenfolge ist Ich
        ein Ergebnis ist ""
        ein Index ist 0
        solange der Index < meine Länge ist:
            das Zeichen ist die Zeichenfolge[Index]
            der Code ist Zeichenfolge: code an dem Index!
            wenn der Code >= 65 und der Code <= 90 ist:
                ein Ergebnis ist das Ergebnis + Zeichenfolge::erstelle aus dem Code + 32
            .
            sonst wenn der Code = 196 ist:
                ein Ergebnis ist das Ergebnis + "ä"
            .
            sonst wenn der Code = 214 ist:
                ein Ergebnis ist das Ergebnis + "ö"
            .
            sonst wenn der Code = 220 ist:
                ein Ergebnis ist das Ergebnis + "ü"
            .
            sonst:
                ein Ergebnis ist das Ergebnis + das Zeichen
            .
            ein Index ist der Index + 1
        .
        gebe das Ergebnis zurück
    .

    Verb(Boolean) endet mit der ZeichenfolgeENDE:
        wenn die Länge der ZeichenfolgeENDE > meine Länge ist: gebe falsch zurück.
        die Zeichenfolge ist Ich
        ein START ist meine Länge - die Länge der ZeichenfolgeENDE
        ein I ist 0
        solange das I kleiner als die Länge der ZeichenfolgeENDE ist:
            wenn die Zeichenfolge[das START + das I] != der ZeichenfolgeENDE[I] ist:
                gebe falsch zurück
            .
            ein I ist das I + 1
        .
        gebe wahr zurück
    .

    Verb(Boolean) startet mit der ZeichenfolgeSTART:
        wenn die Länge der ZeichenfolgeSTART > meine Länge ist: gebe falsch zurück.
        die Zeichenfolge ist Ich
        ein I ist 0
        solange das I kleiner als die Länge der ZeichenfolgeSTART ist:
            wenn die Zeichenfolge[I] != der ZeichenfolgeSTART[I] ist:
                gebe falsch zurück
            .
            ein I ist das I + 1
        .
        gebe wahr zurück
    .

    Verb(Zeichenfolge) wiederhole mich mit der AnZahl:
        ein Ergebnis ist ""
        für jede Zahl von 0 bis zur AnZahl:
            ein Ergebnis ist das Ergebnis + Ich
        .
        gebe das Ergebnis zurück
    .

    Eigenschaft(Zeichenfolgen) Zeichen:
        die Zeichen sind einige Zeichenfolgen[]
        die Zeichenfolge ist Ich
        ein I ist 0
        solange das I kleiner als meine Länge ist:
            Zeichen: füge die Zeichenfolge[I] hinzu!
            ein I ist das I + 1
        .
        gebe die Zeichen zurück
    .
.

// Überladung des Plus-Operators
Implementiere die addierbare<Zeichenfolge, Zeichenfolge> Zeichenfolge:
    Verb(Zeichenfolge) addiere mich mit der Zeichenfolge: intern.
.