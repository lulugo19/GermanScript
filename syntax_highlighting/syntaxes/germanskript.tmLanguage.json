{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GermanSkript",
	"scopeName": "source.germanskript",
	"patterns": [
		{
			"name": "comment.line.double-dash.germanskript",
			"begin": "\\/\\/",
			"end": "$"
		},
		{
			"name": "comment.block.germanskript",
			"begin": "\\/\\*",
			"end": "\\*\\/"
    },
		{
		  "include": "#classdef"
    },
    {
      "include": "#interfacedef"
    },
		{
		  "include": "#fundef"
    },
    {
      "include": "#constantdef"
    },
    {
      "include": "#conversiondef"
    },
    {
      "include": "#propertydef"
    },
    {
      "include": "#implement"
    },
		{
		  "include": "#modul"
		},
		{
		  "include": "#vardecl"
		},
		{
		  "include": "#keywords"
		},
		{
		  "include": "#declinations"
    },
    {
      "include": "#modulscope"
    },
    {
      "include": "#typeparams"
    },
		{
		  "include": "#expressions"
    },
		{
			"include": "#args"
    }
	  ],
	  "repository": {
      "keywords": {
        "patterns": [
          {
            "name": "keyword.control.germanskript",
            "match": "\\b(wenn|dann|sonst|solange|für|jeden|jede|jedes|fortfahren|abbrechen|gebe|zurück|intern)\\b"
          },
          {
            "name": "keyword.other.germanskript",
            "match": "\\b(importiere|verwende|Super)\\b"
          }
        ]
      },
      "expressions": {
        "patterns": [
          {
            "include": "#strings"
          },
          {
            "include": "#numbers"
          },
          {
            "include": "#booleans"
          },
          {
            "include": "#conversion"
          },
          {
            "include": "#operators"
          },
          {
            "include": "#objects"
          },
          {
            "include": "#parenthesized"
          },
          {
            "include": "#list"
          },
          {
            "include": "#lambda"
          },
          {
            "include": "#vars"
          },
          {
            "include": "#functions"
          }
        ]
      },
      "strings": {
        "name": "string.quoted.double.germanskript",
        "begin": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\"",
        "beginCaptures": {
          "1": {
            "name": "variable.parameter.germanskript"
          }
        },
        "end": "\"",
        "patterns": [
          {
            "name": "constant.character.escape.germanskript",
            "match": "\\\\."
          },
          {
            "name": "keyword.operator.interpolation.germanskript",
            "begin": "#\\{",
            "end": "\\}",
            "patterns": [
              {
                "include": "#expressions"
              }
            ]
          }
        ]
      },
      "operators": {
        "name": "keyword.operator.germanskript",
        "match": "(\\||&|=|!=|>|<|>=|<=|\\+|-|\\*|\\/|\\bmod\\b|\\^)|(\\b(ist|sind|oder|und|gleich|ungleich|größer|kleiner|plus|mal|durch|modulo|hoch|als)\\b)"
      },
      "functions": {
        "name": "entity.name.function.germanskript",
        "match": "\\b[a-zöäüß_]+"
      },
      "numbers": {
        "name": "meta.expression.numeric",
        "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?(\\b-?([1-9]\\d{1,2}|\\d)(?:\\.\\d{3})*(?:,\\d+)?)",
        "captures": {
          "1": {
            "name": "variable.parameter.germanskript"
          },
          "5": {
            "name": "constant.numeric.germanskript"
          }
        }
        
      },
      "booleans": {
        "name": "meta.expression.boolean",
        "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\\b(wahr|falsch)\\b",
        "captures": {
          "1": {
            "name": "variable.parameter.germanskript"
          },
          "5": {
            "name": "constant.language.germanskript"
          }
        }
      },
      "objects": {
        "name": "meta.expression.object",
        "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\\b(ein|eine|eines|einer|einen|einem)\\s+(([A-ZÖÄÜ][a-zöäüß]*)+)(\\s+(mit))?",
        "captures": {
          "1": {
            "name": "variable.parameter.germanskript"
          },
          "5": {
            "name": "keyword.other.ein.germanskript"
          },
          "6": {
            "name": "entity.name.type.class.germanskript"
          },
          "9": {
            "name": "keyword.operator.mit.germanskript"
          }
        }
      },
      "vars": {
        "patterns": [
        {
          "name": "meta.expression.variable",
          "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?(\\b((der|die|das|den|des|dem|mein|meine|meines|meiner|meinem|meinen|dein|deine|deines|deiner|deinem|deinen)\\s+)?([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+))",
          "captures": {
            "1": {
              "name": "variable.parameter.germanskript"
            },
            "5": {
              "name": "variable.other.germanskript"
            }
          }
        },
        {
          "name": "meta.expression.variable.special",
          "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\\s+(Ich|Du)",
          "captures": {
            "1": {
              "name": "variable.parameter.germanskript"
            },
            "5": {
              "name": "variable.language.germanskript"
            }
          }
        }
        ]
      },
      "list": {
        "name": "meta.expression.list",
        "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\\s+((einige|einigen|einiger)\\s+(([A-ZÖÄÜ][a-zöäüß]*)+))",
        "captures": {
          "1": {
            "name": "variable.parameter.germanskript"
          },
          "6": {
            "name": "keyword.other.einige.germanskript"
          },
          "7": {
            "name": "entity.name.type.germanskript"
          }
        }
      },
      "lambda": {
        "name": "meta.expression.lambda",
        "begin": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\\s+(etwas\\s+(([A-ZÖÄÜ][a-zöäüß]*)+))",
        "beginCaptures": {
          "1": {
            "name": "variable.parameter.germanskript"
          },
          "5": {
            "name": "entity.name.type.interface.germanskript"
          }
        },
        "end": ":",
        "patterns": [
          {
            "include": "#typeparams"
          },
          {
            "name": "variable.parameter.germanskript",
            "match": "(([A-ZÖÄÜ][a-zöäüß]*)+)"
          }
        ]
      },
      "conversion": {
        "match": "\\b(als)\\s+((([A-ZÖÄÜ][a-zöäüß]*)+)::)*(([A-ZÖÄÜ][a-zöäüß]*)+)",
        "captures": {
          "1": {
            "name": "keyword.operator.als.germanskript"
          },
          "3": {
            "name": "entity.name.type.modul.germanskript"
          },
          "5": {
            "name": "entity.name.type.germanskript"
          }
        }
      },
      "modulscope": {
        "match": "\\s*(([A-ZÖÄÜ][a-zöäüß]*)+)::",
        "captures": {
          "1": {
            "name": "entity.name.type.modul.germanskript"
          }
        }
      },
      "parenthesized": {
        "name": "meta.expression.parenthesized",
        "match": "(\\b(der|die|das|den|des|dem)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+)?\\s*\\(",
        "captures": {
          "1": {
            "name": "variable.parameter.germanskript"
          }
        }
      },
      "params": {
        "match": "\\b(der|die|das|den|des|dem|ein|eine|eines|einer|einige|einigen|einiger)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)(\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+))?",
        "captures": {
        "1": {
          "name": "entity.name.type.germanskript"
        },
        "2": {
          "name": "entity.name.type.germanskript"
        },
        "5": {
          "name": "variable.parameter.germanskript"
        }
        }
      },
      "classdef": {
        "name": "meta.class.germanskript",
        "begin": "\\s*(Nomen)\\b",
        "end": ":",
        "beginCaptures": {
          "1": {
            "name": "storage.type.class.germanskript"
          }
        },
        "patterns": [
          {
            "include": "#params"
          },
          {
            "include": "#typeparams"
          },
          {
            "name": "keyword.other.mit.germanskript",
            "match": "\\bmit\\b"
          },
          {
            "name": "meta.constructor.parent.germanskript",
            "match": "\\b(als)\\s+(([A-ZÖÄÜ][a-zöäüß]*)+)",
            "captures": {
              "1": {
                "name": "keyword.other.als.germanskript"
              },
              "2": {
                "name": "entity.other.inherited-class.germanskript"
              }
            }
          },
          {
            "name": "entity.name.type.class.germanskript",
            "match": "([A-ZÖÄÜ][a-zöäüß]*)+"
          }
        ]
      },
      "interfacedef": {
        "name": "meta.interface.germanskript",
        "begin": "\\s*(Adjektiv)\\b",
        "beginCaptures": {
          "1": {
            "name": "storage.type.interface.germanskript"
          }
        },
        "end": "([a-zöäüß]*)\\s*:",
        "endCaptures": {
          "1": {
            "name": "entity.name.type.interface.germanskript"
          }
        },
        "patterns": [
          {
            "include": "#typeparams"
          }
        ]
      },
      "fundef": {
        "name": "meta.function.germanskript",
        "begin": "\\s*(Verb)",
        "end": ":|(?=(Verb|\\.))",
        "beginCaptures": {
          "1": {
            "name": "storage.type.function.germanskript"
          },
          "2": {
            "name": "entity.name.type.germanskript"
          }
        },
        "patterns": [
          {
            "include": "#params"
          },
          {
            "name": "entity.name.type.class.germanskript",
            "match": "([A-ZÖÄÜ][a-zöäüß]*)+"
          },
          {
            "include": "#functions"
          }
        ]
      },
      "constantdef": {
        "name": "meta.constant.germanskript",
        "match": "\\s*(Konstante)\\s+([A-ZÖÜÄ]+)\\s+(ist)",
        "captures": {
          "1": {
            "name": "storage.type.constant.germanskript"
          },
          "2": {
            "name": "variable.other.constant.germanskript"
          },
          "3": {
            "name": "keyword.other.ist.germanskript"
          }
        }
      },
      "conversiondef": {
        "name": "meta.conversion.germanskript",
        "begin": "\\s*(Als)\\s+(([A-ZÖÄÜ][a-zöäüß]*)+)",
        "beginCaptures": {
          "1": {
            "name": "storage.type.conversion.germanskript"
          },
          "2": {
            "name": "entity.name.type.germanskript"
          }
        },
        "end": ":",
        "patterns": [
          {
            "include": "#typeparams"
          }
        ]
      },
      "propertydef": {
        "name": "meta.property.germanskript",
        "begin": "\\s*(Eigenschaft)",
        "beginCaptures": {
          "1": {
            "name": "storage.type.property.germanskript"
          }
        },
        "end": "(([A-ZÖÄÜ][a-zöäüß]*)+)\\s*:",
        "endCaptures": {
          "1": {
            "name": "entity.name.function.property.germanskript"
          }
        },
        "patterns": [
          {
            "include": "#typeparams"
          },
          {
            "name": "entity.name.type.germanskript",
            "match": "([A-ZÖÄÜ][a-zöäüß]*)+"
          }
        ]
      },
      "implement": {
        "name": "meta.implement.germanskript",
        "begin": "\\s*(Implementiere)",
        "beginCaptures": {
          "1": {
            "name": "keyword.other.implement.germanskript"
          },
          "2": {
            "name": "entity.name.type.class.germanskript"
          }
        },
        "end": ":",
        "patterns": [
          {
            "include": "#typeparams"
          }, 
          {
            "name": "entity.name.type.class.germanskript",
            "match": "\\b(den|die|das)\\b"
          },
          {
            "name": "entity.name.type.interface.germanskript",
            "match": "[a-zöäüß]+"
          },
          {
            "name": "entity.name.type.class.germanskript",
            "match": "([A-ZÖÄÜ][a-zöäüß]*)+"
          }
        ]
      },
      "modul": {
        "name": "meta.modul.germanskript",
        "begin": "\\s*(Modul)\\s*((([A-ZÖÄÜ][a-zöäüß]*)+)::)*(([A-ZÖÄÜ][a-zöäüß]*)+)",
        "end": ":",
        "beginCaptures": {
          "1": {
            "name": "keyword.other.modul.germanskript"
          },
          "3": {
            "name": "entity.name.modul.germanskript"
          },
          "5": {
            "name": "entity.name.modul.germanskript"
          }
        }
      },
      "vardecl": {
        "name": "meta.vardecl.germanskript",
        "match": "(?<=(^|;))\\s*(der|die|das|ein|eine|einige|mein|meine|jener|jene|jenes|dieser|diese|dieses)\\s+((neue|neuer|neues)\\s+)?([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+(ist|sind)",
        "captures": {
          "2": {
            "name": "storage.type.var.germanskript"
          },
          "4": {
            "name": "storage.type.modifier.neu.germanskript"
          },
          "5": {
            "name": "variable.other.germanskript"
          },
          "7": {
            "name": "keyword.operator.germanskript"
          }
        }
      },
      "declinations": {
        "name": "meta.declination",
        "begin": "\\s*(Deklination)\\s+(Maskulinum|Neutrum|Femininum)?",
        "end": "$",
        "beginCaptures": {
          "1": {
            "name": "storage.type.declination"
          },
          "2": {
            "name": "keyword.other.genus"
          }
        },
        "patterns": [
          {
            "name": "meta.declination.sub.germanskript",
            "begin": "\\b(Singular|Plural|Duden)\\s*\\(",
            "end": "\\)",
            "beginCaptures": {
              "1": {
                "name": "keyword.other.germanskript"
              }
            },
            "patterns": [
              {
                "name": "constant.other.word.germanskript",
                "match": "\\b([A-ZÖÄÜ][a-zöäüß]*)"
              }
            ]
        }
      ]
      },
      "typeparams": {
        "begin": "<\\s*(([A-ZÖÄÜ][a-zöäüß]*)+|[a-zöäüß]+)?",
        "beginCaptures": {
          "1": {
            "name": "entity.name.type.germanskript"
          }
        },
        "end": ">",
        "patterns": [
          {
            "name": "entity.name.type.germanskript",
            "match": "([A-ZÖÄÜ][a-zöäüß]*)+"
          },
          {
            "include": "$self"
          }
        ]
      },
      "args": {
        "name": "meta.argument",
        "match": "\\b(der|die|das|den|des|dem|ein|eine|eines|einer|einige|einigen|einiger|mein|meine|meines|meiner|meinem|meinen|dein|deine|deines|deiner|deinem|deinen)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)\\s+([a-zöäüß]*([A-ZÖÄÜ][a-zöäüß]*)+)?",
        "captures": {
        "1": {
          "name": "variable.parameter.germanskript"
        },
        "2": {
          "name": "variable.parameter.germanskript"
        },
        "4": {
          "name": "variable.other.germanskript"
        }
        }
      }
	  }
}